 function settings = loadSettings(obj,varargin)

 computerName = char(java.net.InetAddress.getLocalHost.getHostName);
 
 switch computerName
     
    case 'DQSIMLAB'
        settings = struct(...
    'defaultModules', struct('slots',             [2,            5,        7],  ... available modules slots and parts
                                'parts', {{'SD-PXE-AIO', 'SD-PXE-AIO', 'M3300A'}}),...
    'defaultSettings', struct(...
                        'triggerMode', 'EXTTRIG', ... options are 'EXTTRIG', 'AUTOTRIG',                    'SWHVITRIG'
                        'debug',        0, ...
                        'module2', struct( ... settings for module
                                     'intensityLock', ... for individual RF channels
                                       {{struct( ... channel 0
                                                 'P', 14500,...0, ...
                                                 'I',  665000,...280000,...500000, ...
                                                 'D',     0, ...
                                                 'automticStart', true), ...
                                         struct( ... channel 1
                                                 'P', 10000,...0, ...
                                                 'I',  550000,...500000, ...
                                                 'D',     0, ...
                                                 'automticStart', true), ...
                                         struct( ... channel 2
                                                 'P', 0, ...
                                                 'I',  500000, ...
                                                 'D',     0, ...
                                                 'automticStart', true), ...
                                         struct()}}, ...
                                     'phaseLock', ... for individual RF channels
                                       {{struct( ... channel 0
                                                 'P', 7000,  ...
                                                 'I', 10000,  ...
                                                 'D',  0,  ...
                                                 'phaseRange',      40,  ...
                                                 'frequencyRange',  40,  ...
                                                 'accumulatorSize', 20,  ...
                                                  'phaseOffset',0), ...
                                         struct( ... channel 1
                                                 'P', 16000,  ...
                                                 'I', 6000,  ...
                                                 'D',  0,  ...
                                                 'phaseRange',      40,  ...
                                                 'frequencyRange',  40,  ...
                                                 'accumulatorSize', 20,  ...
                                                  'phaseOffset',0), ...
                                          struct(),  ...
                                          struct()}}, ...
                                     'firmwareFile', '6_2.sbp', ... TODO: give precise path to signadyne class
                                     'inputConfig', struct( ... for individual input channels
                                                      'channel0', [0, 10, 0, 0], ...
                                                      'channel1', [1, 10, 0, 0], ...
                                                      'channel2', [2, 10, 0, 0], ...
                                                      'channel6', [6, 0.24, 1, 0], ...
                                                      'channel7', [7, 0.24, 1, 0]), ...
                                     'registerValues', [0,...  % 0: PLL always on (don't use if not needed)
                                                        0,...  % 1: PLL reference value for triggering 
                                                        0,...% 2:  PLL threshholding reference
                                                        -160,...  % 3: Iput Offset CH 0 
                                                        0,...  % 4: swicht between phase/lock signal monitoring of DAQ 6/7
                                                        0 ,...  % 5: Input Offset Ch 1 
                                                        0,...  % 6: Input Offset CH 2 
                                                        0,...  % 7: switch Ch 2 working mode (0 = normal phase/freq modulation)
                                                        0,...  % 8: enable LUT CH0 
                                                        0,...  % 9: enable LUT CH1
                                                        0,...  % 10: enable LUT CH2
                                                        0,...  % 11: enable AWG data acquisition on DAQ 4,5
                                                        0,...  % 12: enable Amplitude Feedforward
                                                        0,...  % 13: 
                                                        0,...  % 14: 
                                                        0.98*2^15]...  % 15: threshhold value for latch
                                   ), ...
                        'module7', struct( ... lock settings for module
                                    'intensityLock', ... for individual RF channels
                                        {{struct(),    ...
                                          struct(),    ...
                                          struct(),    ...
                                         struct()}},   ...
                                     'phaseLock',   ... for individual RF channels
                                        {{struct(),  ...
                                          struct(),  ...
                                         struct(),  ...
                                          struct()}}, ...
                                     'firmwareFile', '6_2_module7.sbp', ... TODO: give precise path to signadyne class
                                     'inputConfig',  struct(), ...
                                     'registerValues', [0,...  % 0: PLL always on (don't use if not needed)
                                                        0,...  % 1: PLL reference value for triggering 
                                                        1,...% 2:  PLL threshholding reference
                                                        0,...  % 3: Iput Offset CH 0                                                         0,...  % 4: swicht between phase/lock signal monitoring of DAQ 6/7
                                                        0,...  % 5: Input Offset Ch 1 
                                                        0,...  % 6: Input Offset CH 2 
                                                        0,...  % 7: switch Ch 2 working mode (0 = normal phase/freq modulation)
                                                        0,...  % 8: enable LUT CH0 
                                                        0,...  % 9: enable LUT CH1
                                                        0,...  % 10: enable LUT CH2
                                                        0,...  % 11: enable AWG data acquisition on DAQ 4,5
                                                        0,...  % 12: enable trigger connection to PXI line 2 (module2 only!!)
                                                        0,...  % 13: 
                                                        0,...  % 14: 
                                                        0]...  % 15: threshhold value for latch
                                   ), ...
                        'module5', struct( ...
                                     'intensityLock', ... for individual RF channels
                                        {{struct( ... channel 0
                                                  'P', 15000,...0,  ...
                                                  'I', 280000,...850000,...280000,  ...
                                                  'D', 0),  ...
                                          struct( ... channel 1
                                                  'P', 22000,...0,  ...
                                                  'I', 400000,...765000,... 400000,  ...
                                                  'D', 0), ...
                                          struct(),  ...
                                          struct()}}, ...
                                     'phaseLock', ... for individual RF channels
                                        {{struct( ... channel 0
                                                  'P', 40000,  ...
                                                  'I', 10000,  ...
                                                  'D',  0,  ...
                                                  'phaseRange',      50,  ...
                                                  'frequencyRange',  50,  ...
                                                  'accumulatorSize', 30,  ...
                                                  'phaseOffset',0), ...
                                          struct( ... channel 1
                                                  'P', 16000,  ...
                                                  'I', 6000,  ...
                                                  'D',  000,  ...
                                                  'phaseRange',      50,  ...
                                                  'frequencyRange',  50,  ...
                                                  'accumulatorSize', 30,  ...
                                                  'phaseOffset',0), ...
                                          struct(),  ...
                                          struct()}}, ...
                                     'firmwareFile', '6_2.sbp', ... TODO: give precise path to signadyne class
                                     'inputConfig', struct( ... for individual input channel
                                                      'channel0', [0, 10, 0, 0], ...
                                                      'channel1', [1, 10, 0, 0], ...
                                                      'channel6', [6, 0.21, 1, 0], ...
                                                      'channel7', [7, 0.21, 1, 0]) , ... 
                                     'registerValues', [0,...  % 0: PLL always on (don't use if not needed)
                                                        0,...  % 1: PLL reference value for triggering 
                                                        0,...% 2:  PLL threshholding reference
                                                       -10,...  % 3: Iput Offset CH 0 
                                                        0,...  % 4: swicht between phase/lock signal monitoring of DAQ 6/7
                                                        0,...  % 5: Input Offset Ch 1 
                                                        0,...  % 6: Input Offset CH 2 
                                                        0,...  % 7: switch Ch 2 working mode (0 = normal phase/freq modulation)
                                                        0,...  % 8: enable LUT CH0 
                                                        0,...  % 9: enable LUT CH1
                                                        0,...  % 10: enable LUT CH2
                                                        0,...  % 11: enable AWG data acquisition on DAQ 4,5
                                                        0,...  % 12: enable trigger connection to PXI line 2 (moduele 2 only!!!!)
                                                        0,...  % 13:
                                                        0,...  % 14: 
                                                        0.98*2^15]...  % 15: threshhold value for latch
                                   ) ...
                      ));
                  settings.defaultPins = struct( ... % list of default values for pins
                          'vector', struct( ... vector pins, pins names related to phase locks aMEasre hard coded within this class
                                      'module2', ...
                                        {{VectorOut('HDT1L', 'phase', 'AC', [0; 80e6; settings.defaultSettings.module2.phaseLock{1}.phaseOffset], 'HDT, beam 1, left handed circular polarization'), ...
                                          VectorOut('HDT1R', 'phase', 'AC', [0; 80e6; settings.defaultSettings.module2.phaseLock{2}.phaseOffset], 'HDT, beam 1, left handed circular polarization'), ...
                                          VectorOut('HDT2',  'phase', 'AC', [0; 80e6; 0], 'Horizontal dipole trap, beam 2'),                 ... fixed polarization beam
                                          VectorOut('VDT',   'phase', 'AC', [0; 80e6; 0], 'Vertical dipole trap')}},                         ...
                                      'module5', ...
                                        {{VectorOut('HDT3L',     'phase', 'AC', [  0;  80e6; settings.defaultSettings.module5.phaseLock{1}.phaseOffset], 'HDT, beam 3, left handed circular polarization'),  ... next to microwave amplifier
                                          VectorOut('HDT3R',     'phase', 'AC', [ 0;  80e6; settings.defaultSettings.module5.phaseLock{2}.phaseOffset], 'HDT, beam 3, right handed circular polarization'), ... next to microwave amplifier
                                          VectorOut('PLLref',    'phase', 'AC', [1.5; 70e6; 0], 'mixing reference for phase lock, amplitude 1.5V'), ... name reserved for reference pin, do not change!
                                          VectorOut('microwave', 'frequency', 'AC', [  0; 159e6; 0], 'microwave frequency mixed with 9.04GHz')}},  ...
                                      'module7', ...
                                        {{VectorOut('RamanV', 'frequency', 'AC', [0; 80e6; 0],'AOM-RF for vertical Raman beam (AOM10)'),   ... some comment
                                          VectorOut('m7ch1', 'frequency', 'AC', [0; 80e6; 0],'none'),   ... some comment
                                          VectorOut('microwavePhase', 'phase', 'AC', [0; 80e6; 0],'none'),   ... not used
                                          VectorOut('RamanH', 'frequency', 'AC', [0; 80e6; 0],'AOM-RF for horizontal Raman beam (AOM11)')}} ... not connected, BE CAREFULL!
                                    ), ... 
                           'trigger', DigitalOut('sdTrig', 'Trigger for Signadyne modules') ...
                        );
%                     obj.labSettings = settings;
%                     obj.settings = obj.labSettings.defaultSettings;
    
     case 'DESKTOP-0U9UQGT'  % Bachelorlab
        settings = struct(...
    'defaultModules', struct('slots',  [2],  ... available modules slots and parts
                                'parts', {{'M3300A'}}),...
    'defaultSettings', struct(...
                        'triggerMode', 'EXTTRIG', ... options are 'EXTTRIG', 'AUTOTRIG',                    'SWHVITRIG'
                        'debug',        0, ...
                        'module2', struct( ... settings for module
                                     'intensityLock', ... for individual RF channels
                                       {{struct( ... channel 0
                                                 'P', 0, ...
                                                 'I',  280000,...500000, ...
                                                 'D',     0, ...
                                                 'automticStart', true), ...
                                         struct( ... channel 1
                                                 'P', 0, ...
                                                 'I',  500000, ...
                                                 'D',     0, ...
                                                 'automticStart', true), ...
                                         struct( ... channel 2
                                                 'P', 0, ...
                                                 'I',  500000, ...
                                                 'D',     0, ...
                                                 'automticStart', true), ...
                                         struct()}}, ...
                                     'phaseLock', ... for individual RF channels
                                       {{struct( ... channel 0
                                                 'P', 70000,  ...
                                                 'I', 10000,  ...
                                                 'D',  0,  ...
                                                 'phaseRange',      40,  ...
                                                 'frequencyRange',  40,  ...
                                                 'accumulatorSize', 20,  ...
                                                  'phaseOffset',0), ...
                                         struct( ... channel 1
                                                 'P', 16000,  ...
                                                 'I', 6000,  ...
                                                 'D',  0,  ...
                                                 'phaseRange',      40,  ...
                                                 'frequencyRange',  40,  ...
                                                 'accumulatorSize', 20,  ...
                                                  'phaseOffset',0), ...
                                          struct(),  ...
                                          struct()}}, ...
                                     'firmwareFile', '6_2.sbp', ... TODO: give precise path to signadyne class
                                     'inputConfig', struct( ... for individual input channels
                                                      'channel0', [0, 10, 0, 0], ...
                                                      'channel1', [1, 10, 0, 0], ...
                                                      'channel2', [2, 10, 0, 0], ...
                                                      'channel6', [6, 0.24, 1, 0], ...
                                                      'channel7', [7, 0.24, 1, 0]), ...
                                     'registerValues', [0,...  % 0: PLL always on (don't use if not needed)
                                                        0,...  % 1: PLL reference value for triggering 
                                                        0,...% 2:  PLL threshholding reference
                                                        -160,...  % 3: Iput Offset CH 0 
                                                        0,...  % 4: swicht between phase/lock signal monitoring of DAQ 6/7
                                                        0 ,...  % 5: Input Offset Ch 1 
                                                        0,...  % 6: Input Offset CH 2 
                                                        0,...  % 7: switch Ch 2 working mode (0 = normal phase/freq modulation)
                                                        0,...  % 8: enable LUT CH0 
                                                        0,...  % 9: enable LUT CH1
                                                        0,...  % 10: enable LUT CH2
                                                        0,...  % 11: enable AWG data acquisition on DAQ 4,5
                                                        0,...  % 12: enable Amplitude Feedforward
                                                        0,...  % 13: 
                                                        0,...  % 14: 
                                                        0.98*2^15]...  % 15: threshhold value for latch
                                   )...
                        ));
                  
                  settings.defaultPins = struct( ... % list of default values for pins
                          'vector', struct( ... vector pins, pins names related to phase locks aMEasre hard coded within this class
                                      'module2', ...
                                        {{VectorOut('HDT1L', 'phase', 'AC', [0; 0; 0], 'HDT, beam 1, left handed circular polarization'), ...
                                          VectorOut('HDT1R', 'phase', 'AC', [0; 0; 0], 'HDT, beam 1, left handed circular polarization'), ...
                                          VectorOut('HDT2',  'phase', 'AC', [0; 0; 0], 'Horizontal dipole trap, beam 2'),                 ... fixed polarization beam
                                          VectorOut('VDT',   'phase', 'AC', [0; 0; 0], 'Vertical dipole trap')}}                         ...
                                    ), ... 
                           'trigger', DigitalOut('sdTrig', 'Trigger for Signadyne modules') ...
                        );
    otherwise
        error('Unable to determine identity of Computer in use');
 end